on:
  push:
    branches:
      - main

env:
  AWS_REGION: eu-west-3
  CONTAINER_NAME: fpr-backend-task
  ECS_SERVICE: fpr-backend-service
  ECS_CLUSTER: fpr-backend-cluster

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Setup Java 17 corretto
        uses: actions/setup-java@v3
        with:
          distribution: 'corretto'
          java-version: '17'
          cache: gradle

      - name: Build jar file for image
        run: |
          java --version
          chmod +x gradlew
          ./gradlew bootBuildImage --imageName=${{ secrets.DOCKER_USERNAME }}/fpr-backend:latest

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKER_USERNAME }}/fpr-backend
          tags: |
            ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Push Docker image
        id: push-image
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/fpr-backend ${{ steps.meta.outputs.tags }}
          docker image ls
          docker push ${{ secrets.DOCKER_USERNAME }}/fpr-backend -a

      - name: Download task def
        run: |
          aws ecs describe-task-definition --task-definition fpr-backend-task --query taskDefinition > task-definition.json
          echo ${{ steps.meta.outputs.tags }}

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ steps.meta.outputs.tags }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: false